/*jslint browser:true, devel:true, vars:true, forin:true, nomen:true */
/*globals $, _ */

(function () {
    "use strict";

    // TODO: Insert version number on build
    console.log('Starting Goko Salvager <%= config[:version] %>');

    // Global namespace
    // TODO: deal with possibility that a modules runs before this code
    var GS = window.GS = {
        modules: {},
        version: '<%= config[:version] %>'
    };

    var default_options = {
        autozap: false,
        autokick_by_rating: true,
        autokick_by_level: false,
        autokick_by_forname: true,
        explain_kicks: false,
        quick_game_name: 'My Table',
        quick_game_type: 'pro',
        quick_game_players: 2,
        quick_game_automatch: false,
        audio_notifications: true,
        html5_notifications: false,
        popup_notifications: false,
        greeting: "",
        generator: false,
        proranks: true,
        isoranks: false,
        sortkey: 'rating',
        adventurevp: true,
        sidebar: true,
        sidebar_chat: true,
        flash_chat: false,
        chat_noise: false,
        vp_request: false,
        vp_refuse: false,
        always_stack: true,
        automatch_on_seek: true,
        automatch_min_players: 2,
        automatch_max_players: 2,
        automatch_min_sets: 1,
        automatch_max_sets: 15,
        automatch_rSystem: 'pro',
        automatch_rdiff: 1500,
        automatch_vpcounter: null,
        speed_tweak_uniform: false,
        speed_tweak_faster: false,
        debug_mode: false,
        lasttablename: 'My Table',
        blacklist2: {},
        blacklist_common: 0
    };

    // Transform old blacklist data structure to new one
    var transformBlacklist = function (opts) {

        if (opts.hasOwnProperty('automatch_blacklist')) {
            opts.automatch_blacklist.map(function (pname) {
                opts.blacklist2[pname] = {
                    noplay: false,
                    nomatch: true,
                    censor: false
                };
            });
        }
        delete opts.automatch_blacklist;

        if (opts.hasOwnProperty('blacklist')) {
            opts.blacklist.map(function (pname) {
                opts.blacklist2[pname] = {
                    noplay: true,
                    nomatch: true,
                    censor: true
                };
            });
        }
        delete opts.blacklist;
    };

    GS.get_options = function () {
        var optName, out = {};
        if (localStorage.hasOwnProperty('salvagerOptions')) {
            out = JSON.parse(localStorage.salvagerOptions);
        }
        for (optName in default_options) {
            if (!out.hasOwnProperty(optName)) {
                out[optName] = default_options[optName];
            }
        }
        if (out.hasOwnProperty('blacklist')
                || out.hasOwnProperty('automatch_blacklist')) {
            transformBlacklist(out);
        }
        return out;
    };

    GS.set_options = function (o) {
        localStorage.salvagerOptions = JSON.stringify(o);
    };

    GS.get_option = function (optName) {
        return GS.get_options()[optName];
    };

    GS.set_option = function (optionName, optionValue) {
        var opts = GS.get_options();
        opts[optionName] = optionValue;
        GS.set_options(opts);
    };

    // Generic module with name, dependency-checking, and a loader function
    // TODO: deal with possibility that a modules runs before this code
    GS.Module = function (moduleName) {
        this.name = moduleName;

        // To be defined in subclasses
        this.dependencies = [];

        // To be defined in subclasses
        this.load = function () {
            throw 'No loader defined for module ' + moduleName;
        };

        this.getMissingDeps = function () {
            var index = function (obj, i) { return obj[i]; };
            return this.dependencies.filter(function (depName) {
                var dep;
                if (depName[0] === '#') {
                    dep = $(depName)[0];
                } else if (depName[0] === '.') {
                    dep = $(depName);
                } else {
                    try {
                        dep = depName.split('.').reduce(index, window);
                    } catch (e) {
                        return true;
                    }
                }
                return typeof dep === 'undefined' || dep === null;
            });
        };

        this.hasAllDeps = function () {
            return this.getMissingDeps().length === 0;
        };
    };
}());
